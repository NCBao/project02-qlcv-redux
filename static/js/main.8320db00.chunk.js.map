{"version":3,"sources":["constants/ActionTypes.js","actions/index.js","components/UpdateForm.js","components/ContentTable.js","components/Features.js","App.js","reportWebVitals.js","reducers/tasks.js","reducers/isDisplayForm.js","reducers/taskEditing.js","reducers/tasksFilter.js","reducers/index.js","index.js"],"names":["LIST_ALL","GENERATE_TASKS","TOGGLE_FORM","OPEN_FORM","CLOSE_FORM","ADD_TASK","UPDATE_TASK","DELETE_TASK","UPDATE_TASK_EDITING","RESET_TASK_EDITING","CHANGE_STATUS","PASS_TASKS","CHANGE_TYPE_SORT","FILTER_WITH_KEYWORD","updateTaskEditing","task","type","types","passTasks","tasks","UpdateForm","onCloseForm","props","onResetTaskEditing","onSave","e","preventDefault","taskEditing","id","onAddTask","onUpdateTask","onClear","onChange","nameElm","target","name","value","checked","onUpdateTaskEditing","status","this","className","onClick","Component","connect","state","dispatch","actions","ContentTable","findTask","forEach","index","onEdit","onOpenForm","onDelete","onDeleteTask","setTimeout","onPassTasksToFilter","onChangeStatus","tasksFilter","length","content","map","Features","onGenerateData","onGenerateTasks","onToggleForm","onSearch","keyword","document","getElementById","onSort","onChangeTypeSort","onEnter","which","JSON","stringify","by","placeholder","onKeyPress","typeSort","App","isDisplayForm","elmUpdateForm","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","crs","Math","floor","random","toString","substring","createRandomID","findTaskIndex","taskIndex","generateTasks","newTasks","localStorage","setItem","initialState","parse","getItem","myReducer","action","push","splice","sortTasks","sort","firstTask","secondTask","localeCompare","filterTasks","tasksFilted","convertWord","toLowerCase","includes","str","replace","tasksSorted","combineReducers","store","createStore","myReduce","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8320db00.chunk.js","sourcesContent":["export const LIST_ALL = 'LIST_ALL';\r\nexport const GENERATE_TASKS = 'GENERATE_TASKS';\r\nexport const TOGGLE_FORM = 'TOGGLE_FORM';\r\nexport const OPEN_FORM = 'OPEN_FORM';\r\nexport const CLOSE_FORM = 'CLOSE_FORM';\r\nexport const ADD_TASK = 'ADD_TASK';\r\nexport const UPDATE_TASK = 'UPDATE_TASK';\r\nexport const DELETE_TASK = 'DELETE_TASK';\r\nexport const UPDATE_TASK_EDITING = 'UPDATE_TASK_EDITING';\r\nexport const RESET_TASK_EDITING = 'RESET_TASK_EDITING';\r\nexport const CHANGE_STATUS = 'CHANGE_STATUS';\r\nexport const PASS_TASKS = 'PASS_TASKS';\r\nexport const CHANGE_TYPE_SORT = 'CHANGE_TYPE_SORT';\r\nexport const FILTER_WITH_KEYWORD = 'FILTER_WITH_KEYWORD';","import * as types from './../constants/ActionTypes';\r\n\r\nexport const listAll = () => {\r\n\treturn {\r\n\t\ttype : types.LIST_ALL\r\n\t};\r\n}\r\n\r\nexport const generateTasks = () => {\r\n\treturn {\r\n\t\ttype : types.GENERATE_TASKS\r\n\t};\r\n}\r\n\r\nexport const addTask = (task) => {\r\n\treturn {\r\n\t\ttype : types.ADD_TASK,\r\n\t\ttask : task\r\n\t};\r\n}\r\n\r\nexport const updateTask = (task) => {\r\n\treturn {\r\n\t\ttype : types.UPDATE_TASK,\r\n\t\ttask : task\r\n\t};\r\n}\r\n\r\nexport const deleteTask = (id) => {\r\n\treturn {\r\n\t\ttype : types.DELETE_TASK,\r\n\t\tid : id\r\n\t};\r\n}\r\n\r\nexport const toggleForm = () => {\r\n\treturn {\r\n\t\ttype : types.TOGGLE_FORM\r\n\t};\r\n}\r\n\r\nexport const openForm = () => {\r\n\treturn {\r\n\t\ttype : types.OPEN_FORM\r\n\t};\r\n}\r\n\r\nexport const closeForm = () => {\r\n\treturn {\r\n\t\ttype : types.CLOSE_FORM\r\n\t};\r\n}\r\n\r\nexport const updateTaskEditing = (task) => {\r\n\treturn {\r\n\t\ttype : types.UPDATE_TASK_EDITING,\r\n\t\ttask : task\r\n\t}\r\n}\r\n\r\nexport const resetTaskEditing = () => {\r\n\treturn {\r\n\t\ttype : types.RESET_TASK_EDITING,\r\n\t}\r\n}\r\n\r\nexport const changeStatus = (id) => {\r\n\treturn {\r\n\t\ttype : types.CHANGE_STATUS,\r\n\t\tid : id\r\n\t}\r\n}\r\n\r\nexport const passTasks = (tasks) => {\r\n\treturn {\r\n\t\ttype : types.PASS_TASKS,\r\n\t\ttasks : tasks\r\n\t}\r\n}\r\n\r\nexport const changeTypeSort = (typeSort) => {\r\n\treturn {\r\n\t\ttype : types.CHANGE_TYPE_SORT,\r\n\t\ttypeSort : typeSort\r\n\t}\r\n}\r\n\r\nexport const filterWithKeyword = (tasks, keyword) => {\r\n\treturn {\r\n\t\ttype : types.FILTER_WITH_KEYWORD,\r\n\t\ttasks : tasks,\r\n\t\tkeyword : keyword\r\n\t}\r\n}","import React,{ Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './../actions/index';\r\n\r\nclass UpdateForm extends Component{\r\n\r\n\t/*constructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tname : '',\r\n\t\t\tstatus : false\r\n\t\t}\r\n\t}*/\r\n\r\n\tonCloseForm = () => {\r\n\t\tthis.props.onCloseForm();\r\n\t\tthis.props.onResetTaskEditing();\r\n\t}\r\n\r\n\tonSave = (e) => {\r\n\t\te.preventDefault();\r\n\t\tvar { taskEditing } = this.props;\r\n\t\tif( taskEditing.id === '' ){\r\n\t\t\tlet task = {\r\n\t\t\t\t...taskEditing\r\n\t\t\t}\r\n\t\t\tthis.props.onAddTask(task);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tlet task = {\r\n\t\t\t\t...taskEditing\r\n\t\t\t};\r\n\t\t\tthis.props.onUpdateTask(task);\r\n\t\t}\r\n\t\tthis.props.onCloseForm();\r\n\t\tthis.onClear();\r\n\t}\r\n\r\n\tonChange = (e) => {\r\n\t\tvar { taskEditing } = this.props;\r\n\t\tvar nameElm = e.target.name;\r\n\t\tvar value = nameElm === 'txtName' ? (\r\n\t\t\tnameElm = 'name',\r\n\t\t\te.target.value\r\n\t\t) : (\r\n\t\t\tnameElm = 'status',\r\n\t\t\te.target.checked\r\n\t\t);\r\n\t\t/*this.setState({\r\n\t\t\t[nameElm] : value\r\n\t\t});\r\n\t\tsetTimeout(() => {\r\n\t\t\tvar { name, status } = this.state;\r\n\t\t\tconsole.log(this.state);\r\n\t\t\tvar task = {\r\n\t\t\t\t...taskEditing,\r\n\t\t\t\tname : name,\r\n\t\t\t\tstatus : status\r\n\t\t\t};\r\n\t\t\tthis.props.onUpdateTaskEditing(task);\r\n\t\t},10);*/\r\n\t\tvar task = {\r\n\t\t\t\t...taskEditing,\r\n\t\t\t\t[nameElm] : value\r\n\t\t\t};\r\n\t\tthis.props.onUpdateTaskEditing(task);\r\n\t}\r\n\r\n\tonClear = () => {\r\n\t\tvar { taskEditing } = this.props;\r\n\t\tvar task = {\r\n\t\t\t...taskEditing,\r\n\t\t\tname : '',\r\n\t\t\tstatus : false\r\n\t\t}\r\n\t\tthis.props.onUpdateTaskEditing(task);\r\n\t}\r\n\r\n\trender(){\r\n\t\tvar { taskEditing } = this.props;\r\n\t\t/*var { name, status } = this.state;*/\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t<div className={ taskEditing.id === '' ? \"panel panel-primary\" : \"panel panel-warning\" }>\r\n\t\t\t\t\t<div className=\"panel-heading\">\r\n\t\t\t\t\t\t<h3 className=\"panel-title\">{ taskEditing.id === '' ? 'Add work' : 'Edit work' }\r\n\t\t\t\t\t\t\t<span className=\"pull-right cursor-pointer\"\r\n\t\t\t\t\t\t\t\tonClick={ this.onCloseForm }\r\n\t\t\t\t\t\t\t><i className=\"glyphicon glyphicon-remove-sign\"></i></span>\r\n\t\t\t\t\t\t</h3>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"panel-body\">\r\n\t\t\t\t\t\t<form>\r\n\t\t\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t\t\t<label>Name:</label>\r\n\t\t\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" name=\"txtName\" \r\n\t\t\t\t\t\t\t\t\tonChange={ this.onChange }\r\n\t\t\t\t\t\t\t\t\tvalue={ taskEditing.name }\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t\t\t<label>Status:</label>\r\n\t\t\t\t\t\t\t\t<div className=\"checkbox\">\r\n\t\t\t\t\t\t\t\t\t<label className=\"user-select-none\">\r\n\t\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"chkStatus\"\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={ this.onChange }\r\n\t\t\t\t\t\t\t\t\t\t\tchecked={ taskEditing.status }\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\tActive\r\n\t\t\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<button type=\"submit\" className=\"btn btn-primary\"\r\n\t\t\t\t\t\t\t\t\tonClick={ this.onSave }\r\n\t\t\t\t\t\t\t\t>Save</button>\r\n\t\t\t\t\t\t\t\t<button type=\"reset\" className=\"btn btn-warning mg-l-15\"\r\n\t\t\t\t\t\t\t\t\tonClick={ this.onClear }\r\n\t\t\t\t\t\t\t\t>Reset</button>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\ttaskEditing : state.taskEditing\r\n\t};\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n\treturn {\r\n\t\tonCloseForm : () => {\r\n\t\t\tdispatch(actions.closeForm());\r\n\t\t},\r\n\t\tonAddTask : (task) => {\r\n\t\t\tdispatch(actions.addTask(task));\r\n\t\t},\r\n\t\tonUpdateTaskEditing : (task) => {\r\n\t\t\tdispatch(actions.updateTaskEditing(task));\r\n\t\t},\r\n\t\tonResetTaskEditing : () => {\r\n\t\t\tdispatch(actions.resetTaskEditing());\r\n\t\t},\r\n\t\tonUpdateTask : (task) => {\r\n\t\t\tdispatch(actions.updateTask(task));\r\n\t\t}\r\n\t};\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateForm);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './../actions/index';\r\n\r\nclass ContentTable extends Component{\r\n\r\n\tfindTask = (id) => {\r\n\t\tvar { tasks } = this.props;\r\n\t\ttasks.forEach( (task, index) => {\r\n\t\t\tif( task.id === id ){\r\n\t\t\t\tthis.props.onUpdateTaskEditing(task);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tonEdit = (id) => {\r\n\t\tthis.findTask(id);\r\n\t\t//this.props.updateTaskEditing();\r\n\t\tthis.props.onOpenForm();\r\n\t}\r\n\r\n\tonDelete = (id) => {\r\n\t\tthis.props.onDeleteTask(id);\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis.props.onPassTasksToFilter(this.props.tasks);\r\n\t\t}, 10);\r\n\t}\r\n\r\n\tonChangeStatus = (id) => {\r\n\t\tthis.props.onChangeStatus(id);\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tthis.props.onPassTasksToFilter(this.props.tasks);\r\n\t}\r\n\r\n\trender(){\r\n\t\tvar { tasksFilter } = this.props;\r\n\t\tvar tasks = tasksFilter.tasks;\r\n\t\tif( tasks.length !== 0 ){\r\n\t\t\tvar content = tasks.map((task, index) => {\r\n\t\t\t\treturn(\r\n\t\t\t\t\t<tr key={ index }>\r\n\t\t\t\t\t\t<td className=\"center wd-5\">{ index + 1 }</td>\r\n\t\t\t\t\t\t<td className=\"\">{ task.name }</td>\r\n\t\t\t\t\t\t<td className=\"center wd-6\">\r\n\t\t\t\t\t\t\t<label className={ task.status ? \"cursor-pointer label label-success\" : \"cursor-pointer label label-danger\" }\r\n\t\t\t\t\t\t\t\tonClick={ () => this.onChangeStatus(task.id) }\r\n\t\t\t\t\t\t\t>{ task.status ? 'Active' : 'Deactive' }</label></td>\r\n\t\t\t\t\t\t<td className=\"center wd-18\">\r\n\t\t\t\t\t\t\t<button className=\"btn btn-primary\"\r\n\t\t\t\t\t\t\t\tonClick={ () => this.onEdit(task.id) }\r\n\t\t\t\t\t\t\t>Edit</button>\r\n\t\t\t\t\t\t\t<button className=\"btn btn-danger mg-l-15\"\r\n\t\t\t\t\t\t\t\tonClick={ () => this.onDelete(task.id) }\r\n\t\t\t\t\t\t\t>Delete</button>\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t\t\treturn(\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<table className=\"table table-bordered table-hover\">\r\n\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<th className=\"center\">STT</th>\r\n\t\t\t\t\t\t\t\t<th className=\"center\">Name</th>\r\n\t\t\t\t\t\t\t\t<th className=\"center\">Status</th>\r\n\t\t\t\t\t\t\t\t<th className=\"center\">Action</th>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t{ content }\r\n\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t</table>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn(\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<p>We don't have any tasks to show</p>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\ttasks : state.tasks,\r\n\t\ttasksFilter : state.tasksFilter\r\n\t};\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n\treturn {\r\n\t\tonOpenForm : () => {\r\n\t\t\tdispatch(actions.openForm());\r\n\t\t},\r\n\t\tonUpdateTaskEditing : (task) => {\r\n\t\t\tdispatch(actions.updateTaskEditing(task));\r\n\t\t},\r\n\t\tonDeleteTask : (id) => {\r\n\t\t\tdispatch(actions.deleteTask(id));\r\n\t\t},\r\n\t\tonChangeStatus : (id) => {\r\n\t\t\tdispatch(actions.changeStatus(id));\r\n\t\t},\r\n\t\tonPassTasksToFilter : (tasks) => {\r\n\t\t\tdispatch(actions.passTasks(tasks));\r\n\t\t}\r\n\t};\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContentTable);","import React,{ Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './../actions/index';\r\n\r\nclass Features extends Component{\r\n\r\n\tonGenerateData = () => {\r\n\t\tthis.props.onGenerateTasks();\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis.props.onPassTasksToFilter(this.props.tasks);\r\n\t\t},10);\r\n\t}\r\n\r\n\tonToggleForm = () => {\r\n\t\tthis.props.onToggleForm();\r\n\t}\r\n\r\n\tonSearch = () => {\t\t\r\n\t\tvar keyword = document.getElementById('search-box').value;\r\n\t\tthis.props.onSearch(this.props.tasks, keyword);\r\n\t}\r\n\r\n\tonSort = (e) => {\r\n\t\tthis.props.onChangeTypeSort(e.target.value);\r\n\t}\r\n\r\n\tonEnter = (e) => {\r\n\t\tif(e.which === 13){\r\n\t\t\tthis.onSearch();\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis.props.onChangeTypeSort(JSON.stringify({ by : 'name', value : 1 }));\r\n\t\t},10);\r\n\t}\r\n\r\n\trender(){\r\n\t\t/*var { tasksFilter } = this.props;\r\n\t\tconsole.log(tasksFilter.tasks);*/\r\n\t\treturn(\r\n\t\t\t<div className=\"form-group\">\r\n\t\t\t\t<button className=\"btn btn-primary\"\r\n\t\t\t\t\tonClick={ this.onToggleForm }\r\n\t\t\t\t>Add</button>\r\n\t\t\t\t<button className=\"btn btn-success mg-l-15\"\r\n\t\t\t\t\tonClick={ this.onGenerateData }\r\n\t\t\t\t>Generate data</button>\r\n\t\t\t\t<div className=\"wd-50 dp-inline mg-l-15\">\r\n\t\t\t\t\t<input \r\n\t\t\t\t\t\tid=\"search-box\" \r\n\t\t\t\t\t\tclassName=\"form-control dp-inline wd-80\" \r\n\t\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\t\tplaceholder=\"Search box\"\r\n\t\t\t\t\t\tonKeyPress={ this.onEnter }\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<button className=\"btn btn-primary\"\r\n\t\t\t\t\t\tonClick={ this.onSearch }\r\n\t\t\t\t\t>Search</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"dp-inline mg-l-15 min-200\">\r\n\t\t\t\t\t<label>Sort:&nbsp;</label>\r\n\t\t\t\t\t<select className=\"form-control max-160 dp-inline\"\r\n\t\t\t\t\t\tonChange={ this.onSort }\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<option value={JSON.stringify({ by : 'name', value : 1 })}>A-Z</option>\r\n\t\t\t\t\t\t<option value={JSON.stringify({ by : 'name', value : 2 })}>Z-A</option>\r\n\t\t\t\t\t\t<option value={JSON.stringify({ by : 'status', value : 1 })}>Active - Deactive</option>\r\n\t\t\t\t\t\t<option value={JSON.stringify({ by : 'status', value : 2 })}>Deactive - Active</option>\r\n\t\t\t\t\t</select>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\ttasks : state.tasks,\r\n\t\ttasksFilter : state.tasksFilter\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n\treturn {\r\n\t\tonGenerateTasks : () => {\r\n\t\t\tdispatch(actions.generateTasks());\r\n\t\t},\r\n\t\tonToggleForm : () => {\r\n\t\t\tdispatch(actions.toggleForm());\r\n\t\t},\r\n\t\tonChangeTypeSort : (typeSort) => {\r\n\t\t\tdispatch(actions.changeTypeSort(typeSort));\r\n\t\t},\r\n\t\tonPassTasksToFilter : (tasks) => {\r\n\t\t\tdispatch(actions.passTasks(tasks));\r\n\t\t},\r\n\t\tonSearch : (tasks, keyword) => {\r\n\t\t\tdispatch(actions.filterWithKeyword(tasks, keyword));\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Features);","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport UpdateForm from './components/UpdateForm';\r\nimport ContentTable from './components/ContentTable';\r\nimport Features from './components/Features';\r\nimport { connect } from 'react-redux';\r\n\r\nclass App extends Component{\r\n\r\n    /*constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            tasks : [],\r\n            formStatus : false,\r\n            task : {\r\n\r\n            },\r\n            editingTaskIndex : 0,\r\n            taskFilter : []\r\n        }\r\n    }*/\r\n\r\n    /*generateTasks = () => {\r\n        var newTasks = [\r\n            {\r\n                id: this.createRandomID(),\r\n                name: 'Học ReactJS',\r\n                status : true\r\n            },\r\n            {\r\n                id: this.createRandomID(),\r\n                name: 'Ngủ',\r\n                status : true\r\n            },\r\n            {\r\n                id: this.createRandomID(),\r\n                name: 'Chơi game',\r\n                status : false\r\n            },\r\n            {\r\n                id: this.createRandomID(),\r\n                name: 'Học NodeJS',\r\n                status : true\r\n            }\r\n        ];\r\n        this.setState({\r\n            tasks : newTasks,\r\n            taskFilter : newTasks\r\n        });\r\n        this.setToLocalStorage(newTasks);\r\n    }*/\r\n\r\n    /*crs(){\r\n        return Math.floor(1 + Math.random() * 0x10000).toString(16).substring(1);\r\n    }*/\r\n\r\n    /*createRandomID = () => {\r\n        return this.crs() + this.crs() +'-'+this.crs()+'-'+this.crs()+this.crs()+this.crs()+'-'+this.crs();\r\n    }*/\r\n\r\n    /*onGenerateData = () => {\r\n        this.generateTasks();\r\n    }\r\n\r\n    onOpenForm = () => {\r\n        this.setState({\r\n            formStatus : true\r\n        });\r\n    }\r\n\r\n    onCloseForm = () => {\r\n        this.setState({\r\n            formStatus  : false\r\n        });\r\n    }\r\n\r\n    makeEmptyTask = () => {\r\n        this.setState({\r\n            task : {\r\n                id : '',\r\n                name : '',\r\n                status : false\r\n            },\r\n            editingTaskIndex: -1\r\n        });\r\n    }\r\n\r\n    saveUpdateTask = (task) => {\r\n        var { tasks, editingTaskIndex, taskFilter } = this.state;\r\n        if(task.id === ''){\r\n            task.id = this.createRandomID();\r\n            tasks.push(task);\r\n        }\r\n        else{\r\n            tasks[editingTaskIndex] = task;\r\n        }\r\n        if( tasks === taskFilter ){\r\n            this.setState({\r\n                tasks : tasks,\r\n                taskFilter : tasks\r\n            });\r\n        }\r\n        else{\r\n            this.setState({\r\n                tasks : tasks\r\n            });\r\n        }\r\n        this.setToLocalStorage(tasks);\r\n        this.onCloseForm();\r\n    }\r\n\r\n    findTaskIndex = (id) => {\r\n        var { tasks } = this.state;\r\n        var listTaskID = tasks.map((task, index) => {\r\n            return task.id;\r\n        });\r\n        return listTaskID.indexOf(id);\r\n    }\r\n\r\n    findTasks = (key) => {\r\n        var { tasks } = this.state;\r\n        var listTaskFilter = [];\r\n        tasks.forEach((task, index) => {\r\n            var str = this.convertString(task.name);\r\n            if(str.toLowerCase().includes(key.toLowerCase())){\r\n                listTaskFilter.push(task);\r\n            }\r\n        });\r\n        return listTaskFilter;\r\n    }\r\n\r\n    filterTask = (status) => {\r\n        var { taskFilter } = this.state;\r\n        var tasksResult = [];\r\n        taskFilter.forEach((task, index) => {\r\n            if(task.status === status){\r\n                tasksResult.push(task);\r\n            }\r\n        });\r\n        tasksResult.sort((firstItem, secondItem) => {\r\n            return firstItem.name.localeCompare(secondItem.name);\r\n        });\r\n        console.log(tasksResult);\r\n    }\r\n\r\n    convertString(str) {\r\n        str = str.replace(/à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ/g, \"a\");\r\n        str = str.replace(/è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ/g, \"e\");\r\n        str = str.replace(/ì|í|ị|ỉ|ĩ/g, \"i\");\r\n        str = str.replace(/ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ/g, \"o\");\r\n        str = str.replace(/ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ/g, \"u\");\r\n        str = str.replace(/ỳ|ý|ỵ|ỷ|ỹ/g, \"y\");\r\n        str = str.replace(/đ/g, \"d\");\r\n        str = str.replace(/À|Á|Ạ|Ả|Ã|Â|Ầ|Ấ|Ậ|Ẩ|Ẫ|Ă|Ằ|Ắ|Ặ|Ẳ|Ẵ/g, \"A\");\r\n        str = str.replace(/È|É|Ẹ|Ẻ|Ẽ|Ê|Ề|Ế|Ệ|Ể|Ễ/g, \"E\");\r\n        str = str.replace(/Ì|Í|Ị|Ỉ|Ĩ/g, \"I\");\r\n        str = str.replace(/Ò|Ó|Ọ|Ỏ|Õ|Ô|Ồ|Ố|Ộ|Ổ|Ỗ|Ơ|Ờ|Ớ|Ợ|Ở|Ỡ/g, \"O\");\r\n        str = str.replace(/Ù|Ú|Ụ|Ủ|Ũ|Ư|Ừ|Ứ|Ự|Ử|Ữ/g, \"U\");\r\n        str = str.replace(/Ỳ|Ý|Ỵ|Ỷ|Ỹ/g, \"Y\");\r\n        str = str.replace(/Đ/g, \"D\");\r\n        return str;\r\n    }\r\n\r\n    onAdd = () => {\r\n        this.onOpenForm();\r\n        this.makeEmptyTask();\r\n    }\r\n\r\n    onSubmitForm = (task) => {\r\n        this.saveUpdateTask(task);\r\n    }\r\n\r\n    onDelete = (id) => {\r\n        var index = this.findTaskIndex(id);\r\n        var { tasks } = this.state;\r\n        tasks.splice(index, 1);\r\n        this.setState({\r\n            tasks : tasks\r\n        });\r\n        this.setToLocalStorage(tasks);\r\n        alert('Xóa thành công');\r\n    }\r\n\r\n    onEdit = (id) => {\r\n        var index = this.findTaskIndex(id);\r\n        var task = this.state.tasks[index];\r\n        this.setState({\r\n            task : task,\r\n            editingTaskIndex : index\r\n        });\r\n        this.onOpenForm();\r\n    }\r\n\r\n    onSearch = (key) => {\r\n        var listTaskFilter = this.findTasks(key);\r\n        this.setState({\r\n            taskFilter : listTaskFilter\r\n        });\r\n    }\r\n\r\n    onSort = (value) => {\r\n        var { taskFilter } = this.state;\r\n        switch(value){\r\n            case 0: {\r\n                taskFilter.sort((firstItem, secondItem) => {\r\n                        return firstItem.name.localeCompare(secondItem.name);\r\n                    }\r\n                );\r\n                break;\r\n            }\r\n            case 1: {\r\n                taskFilter.sort((secondItem, firstItem) => {\r\n                        return firstItem.name.localeCompare(secondItem.name);\r\n                    }\r\n                );\r\n                break;\r\n            }\r\n            case 2: {\r\n                taskFilter.sort((firstItem, secondItem) => {\r\n                        if( firstItem.status === secondItem.status === true) return 0;\r\n                        else if( firstItem.status === true && secondItem.status === false )\r\n                            return -1;\r\n                        else return 1;\r\n                    }\r\n                );\r\n                break;\r\n            }\r\n            case 3: {\r\n                taskFilter.sort((secondItem, firstItem) => {\r\n                        if( firstItem.status === secondItem.status === true) return 0;\r\n                        else if( firstItem.status === true && secondItem.status === false )\r\n                            return -1;\r\n                        else return 1;\r\n                    }\r\n                );\r\n                break;\r\n            }\r\n            default:{\r\n                break;\r\n            }\r\n        }\r\n        this.setState({\r\n            taskFilter : taskFilter\r\n        });\r\n    }*/\r\n\r\n    render(){\r\n        var { isDisplayForm } = this.props;\r\n        var elmUpdateForm = isDisplayForm ? (\r\n            <UpdateForm/>\r\n        ) : '';\r\n        return(\r\n            <div className=\"mg-30 row\" id=\"wrapper\">\r\n                <p className=\"title\">project 02: quản lý công việc</p>\r\n                <div className={ isDisplayForm ? \"col-xs-4 col-sm-4 col-md-4 col-lg-4\" : \"\" }>\r\n                    { elmUpdateForm }\r\n                </div>\r\n                <div className={ isDisplayForm ? \"col-xs-8 col-sm-8 col-md-8 col-lg-8\" : \"\" }>\r\n                    <Features/>\r\n                    <ContentTable/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isDisplayForm : state.isDisplayForm\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import * as types from './../constants/ActionTypes';\r\n\r\nvar crs = () => {\r\n    return Math.floor(1 + Math.random() * 0x10000).toString(16).substring(1);\r\n}\r\n\r\nvar createRandomID = () => {\r\n    return crs() + crs() +'-'+crs()+'-'+crs()+crs()+crs()+'-'+crs();\r\n}\r\n\r\nvar findTaskIndex = (tasks, id) => {\r\n    var taskIndex = -1;\r\n    tasks.forEach((task, index) => {\r\n        if( task.id === id ){\r\n            taskIndex = index;\r\n        }\r\n    });\r\n    return taskIndex;\r\n}\r\n\r\nvar generateTasks = () => {\r\n    var newTasks = [\r\n        {\r\n            id: createRandomID(),\r\n            name: 'Học ReactJS',\r\n            status : true\r\n        },\r\n        {\r\n            id: createRandomID(),\r\n            name: 'Ngủ',\r\n            status : true\r\n        },\r\n        {\r\n            id: createRandomID(),\r\n            name: 'Chơi game',\r\n            status : false\r\n        },\r\n        {\r\n            id: createRandomID(),\r\n            name: 'Học NodeJS',\r\n            status : true\r\n        }\r\n    ];\r\n    localStorage.setItem('tasks', JSON.stringify(newTasks));\r\n    return newTasks;\r\n}\r\n\r\nvar initialState = ( localStorage && localStorage.tasks ) ? JSON.parse(localStorage.getItem('tasks')) : [];\r\n\r\nvar myReducer = (state = initialState, action) => {\r\n\tswitch( action.type ){\r\n\t\tcase types.LIST_ALL: {\r\n\t\t\treturn state;\r\n\t\t}\r\n\t\tcase types.GENERATE_TASKS: {\r\n\t\t\tstate = generateTasks();\r\n\t\t\treturn state;\r\n\t\t}\r\n\t\tcase types.ADD_TASK: {\r\n            action.task.id = createRandomID();\r\n\t\t\tstate.push(action.task);\r\n            localStorage.setItem('tasks',JSON.stringify(state));\r\n\t\t\treturn [...state];\r\n\t\t}\r\n        case types.UPDATE_TASK: {\r\n            let index = findTaskIndex(state, action.task.id);\r\n            state[index] = action.task;\r\n            localStorage.setItem('tasks',JSON.stringify(state));\r\n            return [...state];\r\n        }\r\n        case types.DELETE_TASK: {\r\n            let index = findTaskIndex(state, action.id);\r\n            state.splice(index,1);\r\n            localStorage.setItem('tasks',JSON.stringify(state));\r\n            return [...state];\r\n        }\r\n        case types.CHANGE_STATUS: {\r\n            let index = findTaskIndex(state, action.id);\r\n            state[index].status = !state[index].status;\r\n            localStorage.setItem('tasks', JSON.stringify(state));\r\n            return [...state];\r\n        }\r\n\t\tdefault: {\r\n\t\t\treturn state;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default myReducer;","import * as types from './../constants/ActionTypes';\r\n\r\nvar initialState = false;\r\n\r\nconst myReducer = (state = initialState, action) => {\r\n\tswitch(action.type){\r\n\t\tcase types.TOGGLE_FORM : {\r\n\t\t\tstate = !state;\r\n\t\t\treturn state;\r\n\t\t}\r\n\t\tcase types.OPEN_FORM : {\r\n\t\t\tstate = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\t\tcase types.CLOSE_FORM : {\r\n\t\t\tstate = false;\r\n\t\t\treturn state;\r\n\t\t}\r\n\t\tdefault : return state;\r\n\t}\r\n}\r\n\r\nexport default myReducer;","import * as types from './../constants/ActionTypes';\r\n\r\nvar initialState = {\r\n\tid : '',\r\n\tname : '',\r\n\tstatus : false\r\n};\r\n\r\nconst myReducer = (state = initialState, action) => {\r\n\tswitch( action.type ){\r\n\t\tcase types.UPDATE_TASK_EDITING : {\r\n\t\t\tstate = {\r\n\t\t\t\t...state,\r\n\t\t\t\tid : action.task.id,\r\n\t\t\t\tname : action.task.name,\r\n\t\t\t\tstatus : action.task.status\r\n\t\t\t}\r\n\t\t\treturn state;\r\n\t\t}\r\n\t\tcase types.RESET_TASK_EDITING : {\r\n\t\t\tstate = {\r\n\t\t\t\tid : '',\r\n\t\t\t\tname : '',\r\n\t\t\t\tstatus : false\r\n\t\t\t}\r\n\t\t\treturn state;\r\n\t\t}\r\n\t\tdefault : {\r\n\t\t\treturn state;\r\n\t\t}\r\n\t}\r\n};\r\n\r\nexport default myReducer;","import * as types from './../constants/ActionTypes';\r\n\r\nvar sortTasks = (tasks, typeSort) => {\r\n\tvar { by, value } = typeSort;\r\n\tif( by === 'name' && value === 1 ){\r\n\t\ttasks.sort((firstTask, secondTask) => {\r\n\t\t\treturn firstTask.name.localeCompare(secondTask.name);\r\n\t\t});\r\n\t\treturn tasks;\r\n\t}\r\n\telse if( by === 'name' && value === 2 ){\r\n\t\ttasks.sort((secondTask, firstTask) => {\r\n\t\t\treturn firstTask.name.localeCompare(secondTask.name);\r\n\t\t});\r\n\t\treturn tasks;\r\n\t}\r\n\telse if( by === 'status' && value === 1 ){\r\n\t\ttasks.sort((firstTask, secondTask) => {\r\n\t\t\tif( firstTask.status === true && secondTask.status === true ){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\telse if( firstTask.status === true && secondTask.status === false ){\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn tasks;\r\n\t}\r\n\telse if( by === 'status' && value === 2 ){\r\n\t\ttasks.sort((secondTask, firstTask) => {\r\n\t\t\tif( firstTask.status === true && secondTask.status === true ){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\telse if( firstTask.status === true && secondTask.status === false ){\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn tasks;\r\n\t}\r\n\telse return tasks;\r\n}\r\n\r\nvar filterTasks = (tasks, keyword) => {\r\n\tif(keyword.length === 0) return tasks;\r\n\tvar tasksFilted = [];\r\n\ttasks.forEach((task, index) => {\r\n\t\tif( convertWord(task.name).toLowerCase().includes(keyword.toLowerCase()) ){\r\n\t\t\ttasksFilted.push(task);\r\n\t\t}\r\n\t});\r\n\treturn tasksFilted;\r\n}\r\n\r\nvar convertWord = (str) => {\r\n    str = str.replace(/à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ/g, \"a\");\r\n    str = str.replace(/è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ/g, \"e\");\r\n    str = str.replace(/ì|í|ị|ỉ|ĩ/g, \"i\");\r\n    str = str.replace(/ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ/g, \"o\");\r\n    str = str.replace(/ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ/g, \"u\");\r\n    str = str.replace(/ỳ|ý|ỵ|ỷ|ỹ/g, \"y\");\r\n    str = str.replace(/đ/g, \"d\");\r\n    str = str.replace(/À|Á|Ạ|Ả|Ã|Â|Ầ|Ấ|Ậ|Ẩ|Ẫ|Ă|Ằ|Ắ|Ặ|Ẳ|Ẵ/g, \"A\");\r\n    str = str.replace(/È|É|Ẹ|Ẻ|Ẽ|Ê|Ề|Ế|Ệ|Ể|Ễ/g, \"E\");\r\n    str = str.replace(/Ì|Í|Ị|Ỉ|Ĩ/g, \"I\");\r\n    str = str.replace(/Ò|Ó|Ọ|Ỏ|Õ|Ô|Ồ|Ố|Ộ|Ổ|Ỗ|Ơ|Ờ|Ớ|Ợ|Ở|Ỡ/g, \"O\");\r\n    str = str.replace(/Ù|Ú|Ụ|Ủ|Ũ|Ư|Ừ|Ứ|Ự|Ử|Ữ/g, \"U\");\r\n    str = str.replace(/Ỳ|Ý|Ỵ|Ỷ|Ỹ/g, \"Y\");\r\n    str = str.replace(/Đ/g, \"D\");\r\n    return str;\r\n}\r\n\r\nvar initialState = {\r\n\tkeyword : '',\r\n\ttasks : [],\r\n\tsort : {\r\n\t\tby : 'name',\r\n\t\tvalue : 1 // 1: asc - 2: desc\r\n\t}\r\n}\r\n\r\nconst myReducer = (state = initialState, action) => {\r\n\tswitch(action.type){\r\n\t\tcase types.PASS_TASKS : {\r\n\t\t\tstate.tasks = action.tasks;\r\n\t\t\treturn {...state};\r\n\t\t}\r\n\t\tcase types.CHANGE_TYPE_SORT : {\r\n\t\t\tlet typeSort = JSON.parse(action.typeSort);\r\n\t\t\tlet tasksSorted= sortTasks(state.tasks, typeSort);\r\n\t\t\tstate = {\r\n\t\t\t\t...state,\r\n\t\t\t\ttasks : tasksSorted,\r\n\t\t\t\tsort : typeSort\r\n\t\t\t};\r\n\t\t\treturn state;\r\n\t\t}\r\n\t\tcase types.FILTER_WITH_KEYWORD : {\r\n\t\t\tvar tasksFilted = filterTasks(action.tasks, action.keyword);\r\n\t\t\tstate = {\r\n\t\t\t\t...state,\r\n\t\t\t\tkeyword : action.keyword,\r\n\t\t\t\ttasks : tasksFilted\r\n\t\t\t}\r\n\t\t\treturn state;\r\n\t\t}\r\n\t\tdefault : return state;\r\n\t}\r\n}\r\n\r\nexport default myReducer;","import { combineReducers } from 'redux';\r\nimport tasks from './tasks';\r\nimport isDisplayForm from './isDisplayForm';\r\nimport taskEditing from './taskEditing';\r\nimport tasksFilter from './tasksFilter';\r\n\r\nconst myReducer = combineReducers({\r\n\ttasks, //tasks : tasks\r\n\tisDisplayForm,\r\n\ttaskEditing,\r\n\ttasksFilter,\r\n});\r\n\r\nexport default myReducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n//store\r\nimport { createStore } from 'redux';\r\n//reducer\r\nimport myReduce from './reducers/index';\r\n//provider\r\nimport { Provider } from 'react-redux';\r\n\r\nconst store = createStore(\r\n  myReduce,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={ store }>\r\n      <App/>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}